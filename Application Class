public class MyApplication extends Application {
    // For Fragment 
    //http://tutorialsbuzz.com/2017/02/android-fragment-transaction-one-activity-one-container-with-multiple-fragment.html

    public static final String TAG = MyApplication.class.getSimpleName();
    private static MyApplication mInstance;
    private DisplayImageOptions imageOptions;
    private ImageLoader mImageLoader;

    //private ImageLoader mImageLoader;
    ///private DisplayImageOptions imageOptions;
    public static synchronized MyApplication getInstance() {
        return mInstance;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        mInstance = this;
        initImageLoader(getApplicationContext());
    }

    public ImageLoader getImageLoader() {
        if (mImageLoader == null) {
            mImageLoader = ImageLoader.getInstance();
            mImageLoader.init(ImageLoaderConfiguration.createDefault(this));
        }
        return this.mImageLoader;
    }

    public static void initImageLoader(Context context) {
        // This configuration tuning is custom. You can tune every option, you may tune some of them,
        // or you can create default configuration by
        //  ImageLoaderConfiguration.createDefault(this);
        // method.
        ImageLoaderConfiguration.Builder config = new ImageLoaderConfiguration.Builder(context);
        config.threadPriority(Thread.NORM_PRIORITY - 2);
        config.denyCacheImageMultipleSizesInMemory();
        config.diskCacheFileNameGenerator(new Md5FileNameGenerator());
        config.diskCacheSize(50 * 1024 * 1024); // 50 MiB
        config.tasksProcessingOrder(QueueProcessingType.LIFO);
        config.writeDebugLogs(); // Remove for release app

        // Initialize ImageLoader with configuration.
        ImageLoader.getInstance().init(config.build());
    }

    public DisplayImageOptions getDisplayImageOptions() {
        if (imageOptions == null) {
            imageOptions = new DisplayImageOptions.Builder()
                    .showImageOnLoading(R.drawable.sciencecity)
                    .showImageForEmptyUri(R.drawable.sciencecity)
                    .showImageOnFail(R.drawable.sciencecity)
                    .cacheOnDisk(true)
                    .imageScaleType(ImageScaleType.EXACTLY)
            .build();
        }
        return imageOptions;
    }

    /*public DisplayImageOptions getDisplayImageOptions() {
        if (imageOptions == null) {
            imageOptions = new DisplayImageOptions.Builder()
                    //.showImageOnLoading(R.drawable.mobile)
                    .showImageForEmptyUri(R.drawable.mobile)
                    .showImageOnFail(R.drawable.mobile)
                    .cacheOnDisk(true)
                    .imageScaleType(ImageScaleType.EXACTLY)*//*.displayer(displayer)*//*
                    .build();
        }
        return imageOptions;
    }

    public DisplayImageOptions getDisplayImageOptionsUser() {
        if (imageOptionsForUser == null) {
            imageOptionsForUser = new DisplayImageOptions.Builder()
                    //.showImageOnLoading(R.drawable.mobile)
                    .showImageForEmptyUri(R.drawable.default_user_icon)
                    .showImageOnFail(R.drawable.default_user_icon)
                    .cacheOnDisk(true)
                    .imageScaleType(ImageScaleType.EXACTLY)*//*.displayer(displayer)*//*
                    .build();
        }
        return imageOptionsForUser;
    }

    public DisplayImageOptions getDisplayImageOptionsForStore() {
        if (imageOptionsForStore == null) {
            imageOptionsForStore = new DisplayImageOptions.Builder()
                    .showImageOnLoading(R.drawable.store_icon)
                    .showImageForEmptyUri(R.drawable.store_icon)
                    .showImageOnFail(R.drawable.store_icon)
                    .cacheOnDisk(true)
                    .imageScaleType(ImageScaleType.EXACTLY)
                    .build();
        }
        return imageOptionsForStore;
    }

    public ImageLoader getImageLoader() {
        if (mImageLoader == null) {
            mImageLoader = ImageLoader.getInstance();
            mImageLoader.init(ImageLoaderConfiguration.createDefault(this));
        }
        return this.mImageLoader;
    }

    public <T> void addToRequestQueue(Request<T> req, String tag) {
        // set the default tag if tag is empty
        req.setTag(TextUtils.isEmpty(tag) ? TAG : tag);
        getRequestQueue().add(req);
    }

    public <T> void addToRequestQueue(Request<T> req) {
        req.setTag(TAG);
        getRequestQueue().add(req);
    }

    public void cancelPendingRequests(Object tag) {
        if (mRequestQueue != null) {
            mRequestQueue.cancelAll(tag);
        }
    }*/
}
